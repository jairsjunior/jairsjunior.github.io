{"version":3,"sources":["components/home/HomeModel.js","components/forca/ForcaModel.js","components/forca/Forca.js","components/palavras/PalavrasModel.js","components/palavras/Palavras.js","components/player-input/PlayerInputModel.js","components/player-input/PlayerInput.js","components/home/Home.js","components/homePlayer/HomePlayerModel.js","components/homePlayer/HomePlayer.js","App.js","serviceWorker.js","index.js"],"names":["HomeModel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","questions","text","word","actualPlayer","manuh","subscribe","msg","info","undefined","publish","JSON","stringify","code","initManuhBridge","_this2","manuhBridge","ManuhBridge","protocol","host","port","context","console","log","subscribeRemote2LocalTopics","subscribeLocal2RemoteTopics","setWord","position","Math","floor","random","length","window","location","reload","RhelenaPresentationModel","ForcaModel","playerName","player","playerCode","error","maxError","endGame","concat","Forca","attachModelToView","react_default","a","createElement","style","width","state","margin","id","Component","PalavrasModel","question","letters","lettersShow","lettersTry","letterCorrect","wordSize","letter","parse","testLetter","type","testWord","index","tmpLetter","toUpperCase","push","visible","trim","size","retained","runningGame","Palavras","lib","fluid","key","xs","md","map","value","borderColor","borderWidth","borderStyle","padding","marginTop","marginBottom","values","PlayerInputModel","myTurn","actual","PlayerInput","onChange","event","viewModel","setLetter","target","maxLength","onClick","disabled","Home","Palavras_Palavras","Forca_Forca","margingTop","startGame","cleanGame","HomePlayer","HomePlayerModel","PlayerInput_PlayerInput","App","HomePlayer1","HomePlayer_HomePlayer","assign","HomePlayer2","className","BrowserRouter","Route","path","exact","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72b9a8ba.chunk.js","sourcesContent":["import React, { Component } from 'react'; \nimport { RhelenaPresentationModel } from 'rhelena';\nimport manuh from 'manuh';\nimport { ManuhBridge } from 'manuh-bridge'\n\nexport default class HomeModel extends RhelenaPresentationModel {\n    constructor(props){\n        super(props);\n\n        this.questions = [\n            { text: \"Teste\" , word: \"teste\" },\n            { text: \"Jane\" , word: \"jane\" },\n            { text: \"Junior\" , word: \"junior\" },\n        ]\n\n        this.actualPlayer = \"1\";\n\n        manuh.subscribe(`forca/player/turn/change`, `HomeModel`, (msg, info) => {\n            if(msg != undefined){\n                this.actualPlayer == \"1\" ? this.actualPlayer = \"2\" : this.actualPlayer = \"1\";\n                manuh.publish(`forca/player/turn/set`,  JSON.stringify({ code: this.actualPlayer })); \n            }\n        })\n\n        this.initManuhBridge();\n    }\n\n    initManuhBridge(){\n        let mqttConfig = {\n            protocol: 'ws',\n            host: 'iot.eclipse.org',\n            port: 80,\n            context: 'ws'\n        }\n    \n        this.manuhBridge = new ManuhBridge(manuh, mqttConfig, ()=>{\n            console.log('Client connected!');\n            this.manuhBridge.subscribeRemote2LocalTopics([ 'forca/player/turn/change', 'forca/player/letter/set' ]);\n            this.manuhBridge.subscribeLocal2RemoteTopics([ 'forca/player/turn/set', 'forca/end', 'forca/remote/question/set', 'forca/remote/player/letter/set', 'forca/player/1/add', 'forca/player/2/add' ]);\n        });\n        \n    }\n\n    startGame(){\n        manuh.publish(`forca/player/turn/set`, JSON.stringify({ code: this.actualPlayer }));\n        this.setWord();\n    }\n\n\n    setWord(){\n        let position = Math.floor(Math.random() * this.questions.length)\n        manuh.publish(`forca/question/set`, this.questions[position])\n        manuh.publish(`forca/remote/question/set`, JSON.stringify(this.questions[position]))\n    }\n\n    cleanGame(){\n        window.location.reload();\n    }\n}","import React, { Component } from 'react'; \nimport { RhelenaPresentationModel, globalState } from 'rhelena';\nimport manuh from 'manuh';\n\nexport default class ForcaModel extends RhelenaPresentationModel {\n    constructor(props){\n        super(props);\n\n        this.playerName = props.player;\n        this.playerCode = props.code;\n        this.error = 0;\n        this.maxError = 5; \n        this.endGame = false;\n\n        manuh.subscribe(`forca/player/${this.playerCode}/add`, `ForcaPlayer-${this.playerCode}`, (msg, info) => {\n            this.error++;\n            if(this.error == this.maxError){\n                this.endGame = true;\n            }\n        });\n    }\n}","import React, {Component} from 'react'\nimport { Grid, Row, Col} from 'react-flexbox-grid';\nimport { attachModelToView, globalState } from 'rhelena';\nimport ForcaModel from './ForcaModel'\n\nexport default class Forca extends Component {\n\n    componentWillMount(){\n        attachModelToView(new ForcaModel(this.props), this);\n    }\n\n    render(){\n        return (\n            \n            <div style={{ width: \"100%\"}}>\n                <h2>{this.state.playerName || 'Jogador 1'}</h2>\n                {/* <span> { this.state.nomeImagem } - { this.state.error }</span> */}\n                <div style={{margin: \"auto\", width: \"15%\"}}>\n                    <div id={`image-${this.state.error}`}></div>\n                </div>\n                { this.state.endGame ? <h1> FIM DE JOGO! </h1> : ''}\n            </div>\n        ) \n    }\n}","import React, { Component } from 'react'; \nimport { RhelenaPresentationModel } from 'rhelena';\nimport manuh from 'manuh';\n\nexport default class PalavrasModel extends RhelenaPresentationModel {\n    constructor(props){\n        super(props);\n\n        this.question = props.question;\n\n        this.letters = {};\n        this.lettersShow = []; \n        this.lettersTry = {};\n        this.letterCorrect = 0;\n        this.wordSize = 0; \n\n        manuh.subscribe(`forca/player/letter/set`, `Palavras`, (msg, info) => {\n            if(msg != undefined){\n                if(msg.letter == undefined){\n                    msg = JSON.parse(msg);\n                }\n                this.testLetter(msg.letter, msg.playerCode);\n            }\n        });\n\n        manuh.subscribe(`forca/player/word/set`, `Palavras`, (msg, info) => {\n            if(msg != undefined){\n                if(props.type == \"remote\"){\n                    msg = JSON.parse(msg);\n                }\n                this.testWord(msg.word, msg.playerCode);\n            }\n        });\n\n        manuh.subscribe(props.type == \"local\" ? `forca/question/set` : `forca/remote/question/set`, `Palavras`, (msg, info) => {\n            if(msg != undefined){\n                if(props.type == \"remote\"){\n                    msg = JSON.parse(msg);\n                }\n                this.question = msg;\n                this.letterCorrect = 0;\n                this.letters = {};\n                this.lettersShow = []; \n                this.lettersTry = {};\n                this.wordSize = this.question.word.length;\n                for(let index in this.question.word){\n                    let tmpLetter = this.question.word[index].toUpperCase();\n                    this.letters[tmpLetter] = false;\n                    this.lettersShow.push({letter: tmpLetter, visible: false});\n                    this.letters = this.letters;\n                    this.lettersShow = this.lettersShow;\n                }\n            }\n        })\n    }\n\n    testWord(word, playerCode){\n        word = word.trim();\n        if(word.size == this.wordSize){\n            if(this.question.word.toUpperCase == word.toUpperCase){\n                manuh.publish(`forca/end`, { type: \"winner\", player: playerCode});\n            }\n        }\n    }\n\n    testLetter(letter, playerCode){\n        let tmpLetter = letter.toUpperCase();\n        if(this.letters[tmpLetter] == undefined){\n            if(this.lettersTry[tmpLetter] == undefined){\n                this.lettersTry[tmpLetter] = tmpLetter;\n                this.lettersTry = this.lettersTry;\n                manuh.publish(`forca/player/${playerCode}/add`, { letter: tmpLetter, player: this.playerName }, { retained: true });\n            }else{\n                console.log('Letra já informada!');\n            }\n        }else{\n            this.letters[tmpLetter] = true;\n            for(let index in this.lettersShow){\n                if(this.lettersShow[index].letter == tmpLetter){\n                    manuh.publish(`forca/remote/player/letter/set`, JSON.stringify({ letter: tmpLetter, player: this.playerName }));\n                    this.lettersShow[index].visible = true;\n                    this.letterCorrect++;\n                    this.lettersShow = this.lettersShow;\n                }\n            }\n            if(this.letterCorrect == this.wordSize){\n                manuh.publish(`forca/end`, { type: \"winner\", player: playerCode, runningGame: false});\n            }\n        }\n    }\n    \n}","import React, {Component} from 'react'\nimport { Grid, Row, Col} from 'react-flexbox-grid';\nimport { attachModelToView, globalState } from 'rhelena';\nimport PalavrasModel from './PalavrasModel'\n\n\nexport default class Palavras extends Component {\n\n    componentWillMount(){\n        attachModelToView(new PalavrasModel(this.props), this);\n    }\n\n    render(){\n        return this.state.question != undefined ? (\n            <Grid fluid>\n                <Row key=\"a\">\n                    <Col xs={12} md={12}>\n                        <div>\n                            <h3>Pergunta:</h3>\n                            { this.state.question.text }\n                        </div>\n                    </Col>\n                </Row>\n                <Row key=\"b\">\n                    <Col xs={12} md={12}>\n                        <div style={{ margin: \"2em\"}}>\n                        { this.state.lettersShow.map((value, index) => {\n                            if(value.visible){\n                                return ( <span key={index} style={{ borderColor: \"black\", borderWidth: \"2px\", borderStyle: \"solid\", padding: \"5px\", margin: \"10px\" }}>{value.letter}</span> );\n                            }else{\n                                return ( <span key={index} style={{ borderColor: \"black\", borderWidth: \"2px\", borderStyle: \"solid\", padding: \"5px\", margin: \"10px\" }}>&nbsp;&nbsp;</span> );\n                            }\n                        }) }\n                        </div>\n                    </Col>\n                </Row>\n                <Row key=\"c\">\n                    <Col xs={12} md={12}>\n                        <div style={{ marginTop: \"4em\", marginBottom: \"2em\" }}>\n                            <h3>Letras com Tentativa</h3>\n                            { Object.values(this.state.lettersTry).map((value) => {\n                                return ( <span style={{ padding: \"5px\", margin: \"10px\" }}>{value}</span> )\n                            }) }\n                        </div>\n                    </Col>\n                </Row>\n            </Grid>\n        ) : ('')\n    }\n}","import React, { Component } from 'react'; \nimport { RhelenaPresentationModel } from 'rhelena';\nimport manuh from 'manuh';\n\nexport default class PlayerInputModel extends RhelenaPresentationModel {\n    constructor(props){\n        super(props);\n        this.playerName= props.player;\n        this.playerCode= props.code;\n        this.letter = '';\n        this.myTurn = false;\n\n        manuh.subscribe(`forca/player/turn/set`, `PlayerInput-${this.playerCode}`, (msg, info) => {\n            if(msg != undefined){\n                msg = JSON.parse(msg);\n                console.log('Turn Change: ', msg);\n                console.log('Player Code', this.playerCode); \n                console.log(this.playerCode == msg.code)\n                if(this.playerCode == msg.code){\n                    this.myTurn = true;\n                    console.log('SET MY TURN ==>')\n                }else{\n                    this.myTurn = false;\n                }\n            }\n        })\n\n        manuh.subscribe(`forca/end`, `PlayerInput-${this.playerCode}`, (msg, info) => {\n            if(msg != null){\n                if(msg.runningGame == false){\n                    this.myTurn = false;\n                }\n            }\n        })\n    }\n\n    testLetter(){\n        if(this.letter != ''){\n            manuh.publish(`forca/player/letter/set`, JSON.stringify({ letter: this.letter, player: this.playerName, playerCode: this.playerCode }));\n            manuh.publish(`forca/player/turn/change`, JSON.stringify({ actual: this.playerCode }));\n            this.letter = '';\n        }\n    }\n    \n    setLetter(letter){\n        this.letter = letter;\n    }\n}","import React, { Component } from 'react'\nimport { Grid, Row, Col} from 'react-flexbox-grid';\nimport { attachModelToView } from 'rhelena';\nimport PlayerInputModel from './PlayerInputModel'\n\n\nexport default class PlayerInput extends Component {\n\n    componentWillMount(){\n        attachModelToView(new PlayerInputModel(this.props), this);\n    }\n\n    render(){\n        return (\n            <Grid fluid>\n                <Row key=\"a\">\n                    <Col xs={12} md={12}>\n                        <span>{ this.state.playerName }</span>\n                    </Col>\n                </Row>\n                <Row key=\"b\">\n                    <Col xs={12} md={12}>\n                        <input \n                            onChange={(event) => this.viewModel.setLetter(event.target.value) }\n                            value={this.state.letter}\n                            maxLength=\"1\"\n                        >\n                        </input>\n                        <button \n                            onClick={() => this.viewModel.testLetter()}\n                            disabled={!this.state.myTurn}\n                        >Enviar</button>\n                    </Col>\n                </Row>\n            </Grid>\n        )\n    }\n}","import React, {Component} from 'react'\nimport { Grid, Row, Col} from 'react-flexbox-grid';\nimport { attachModelToView } from 'rhelena';\nimport HomeModel from './HomeModel'\nimport Forca from '../forca/Forca'\nimport Palavras from '../palavras/Palavras'\nimport PlayerInput from '../player-input/PlayerInput'\n\nexport default class Home extends Component {\n\n    componentWillMount(){\n        attachModelToView(new HomeModel(this.props), this);\n    }\n\n    render(){\n        return (\n            <Grid fluid>\n                <Row>\n                    <h1> Forca do 5 S</h1>\n                </Row>\n                <Row>\n                    <Col xs={12} md={6}>\n                        <Row>\n                            <Palavras type=\"local\"></Palavras>\n                        </Row>\n                        {/* <Row>\n                            <Col xs={12} md={12}>\n                                <PlayerInput player=\"Jogador 1\" code=\"1\"></PlayerInput>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col xs={12} md={12}>\n                                <PlayerInput player=\"Jogador 2\" code=\"2\"></PlayerInput>\n                            </Col>\n                        </Row> */}\n                    </Col>\n                    <Col xs={12} md={6}>\n                        <Row>\n                            <Col xs={12} md={6}>\n                                <Forca player=\"Jogador 1\" code=\"1\"></Forca>\n                            </Col>\n                            <Col xs={12} md={6}>\n                                <Forca player=\"Jogador 2\" code=\"2\"></Forca> \n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Row>\n                    <div style={{ margingTop: \"1em\"}}>\n                        <h5>Configurações</h5>\n                        <button onClick={() => this.viewModel.startGame()}>Iniciar Jogo</button>\n                        <button onClick={() => this.viewModel.setWord()}>Proxima Palavra</button>\n                        <button onClick={() => this.viewModel.cleanGame()}>Limpar Jogo</button>\n                    </div>\n                </Row>\n            </Grid>\n        )\n    }\n}","import React, { Component } from 'react'; \nimport { RhelenaPresentationModel } from 'rhelena';\nimport manuh from 'manuh';\nimport { ManuhBridge } from 'manuh-bridge'\n\nexport default class HomeModel extends RhelenaPresentationModel {\n    constructor(props){\n        super(props);\n\n        this.playerName = props.player;\n        this.playerCode = props.code;\n\n        console.log('props', JSON.stringify(props));\n        this.initManuhBridge();\n    }\n\n    initManuhBridge() {\n        let mqttConfig = {\n            protocol: 'ws',\n            host: 'iot.eclipse.org',\n            port: 80,\n            context: 'ws'\n        }\n    \n        this.manuhBridge = new ManuhBridge(manuh, mqttConfig, ()=>{\n            console.log('Client connected!');\n            this.manuhBridge.subscribeRemote2LocalTopics([ `forca/player/${this.playerCode}/add`, 'forca/player/turn/set', 'forca/end', 'forca/remote/question/set' ]);\n            this.manuhBridge.subscribeLocal2RemoteTopics([ 'forca/player/letter/set', 'forca/player/turn/change' ]);\n        });\n        \n        \n    }\n}","import React, {Component} from 'react'\nimport { Grid, Row, Col} from 'react-flexbox-grid';\nimport { attachModelToView } from 'rhelena';\nimport HomePlayerModel from './HomePlayerModel'\nimport Forca from '../forca/Forca'\n// import Palavras from '../palavras/Palavras'\nimport PlayerInput from '../player-input/PlayerInput'\n\nexport default class HomePlayer extends Component {\n\n    componentWillMount(){\n        attachModelToView(new HomePlayerModel(this.props), this);\n    }\n\n    render(){\n        return (\n            <Grid fluid>\n                <Row>\n                    <h1>Forca do 5 S</h1>\n                </Row>\n                <Row>\n                    <Col xs={12} md={6}>\n                        <Row>\n                            {/* <Palavras type=\"remote\"/> */}\n                        </Row>\n                        <Row>\n                            <Col xs={12} md={12}>\n                                <PlayerInput player={this.state.playerName} code={this.state.playerCode}></PlayerInput>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xs={12} md={6}>\n                        <Row>\n                            <Col xs={12} md={6}>\n                                <Forca player={this.state.playerName} code={this.state.playerCode}></Forca>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </Grid>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Route } from 'react-router'\n\n\nimport Home from './components/home/Home'\nimport HomePlayer from './components/homePlayer/HomePlayer'\nimport './App.css';\n\n\nclass App extends Component {\n\n  HomePlayer1 = (props) => {\n    return (\n      <HomePlayer\n        player=\"Jogador 1\"\n        code=\"1\"\n        {...props}\n      />\n    );\n  }\n\n  HomePlayer2 = (props) => {\n    return (\n      <HomePlayer\n        player=\"Jogador 2\"\n        code=\"2\"\n        {...props}\n      />\n    );\n  }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <div>\n            <Route path=\"/\" exact={true} component={Home} /> \n            <Route path=\"/player1\" exact={true} component={this.HomePlayer1}/>\n            <Route path=\"/player2\" exact={true} component={this.HomePlayer2}/>\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}